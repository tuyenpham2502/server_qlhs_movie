version: '3.8'
services:
  app :
    build:
      context: contextPath
      dockerfile: Dockerfile
    image: qlhs-app 
    volumes:
      - ./:/app # mount the current directory to /app inside the container
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE_NAME}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: ${REDIS_HOST}
      PORT: ${PORT} 
    ports:
      - "${PORT}:${PORT}"
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - db-network
      - cache-network
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost:${PORT} || exit 1z
      interval: 30s
      timeout: 10s
      retries: 5

        
  db: 
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE_NAME}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongodb+srv://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@localhost:${DB_PORT} --quiet
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - .docker/data/db:/data/db
    restart: unless-stopped
    networks:
      - db-network
    user: "1000:1000"



  redis:
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    image: redis
    command: redis-server
    networks:
      - cache-network
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    user: "1000:1000"
    volumes:
      - .docker/data/redis:/data
    restart: unless-stopped

networks:
  cache-network:
    driver: bridge
  db-network:
    driver: bridge
